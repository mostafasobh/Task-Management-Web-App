[{"D:\\all-web-projects\\React-Projects\\trello\\src\\index.js":"1","D:\\all-web-projects\\React-Projects\\trello\\src\\App.js":"2","D:\\all-web-projects\\React-Projects\\trello\\src\\reportWebVitals.js":"3","D:\\all-web-projects\\React-Projects\\trello\\src\\store\\reducers\\reducer.js":"4","D:\\all-web-projects\\React-Projects\\trello\\src\\components\\columns\\Columns.js":"5","D:\\all-web-projects\\React-Projects\\trello\\src\\components\\Cards\\Cards.js":"6","D:\\all-web-projects\\React-Projects\\trello\\src\\store\\reducers\\data.js":"7","D:\\all-web-projects\\React-Projects\\trello\\src\\components\\Modal\\Modal.jsx":"8","D:\\all-web-projects\\React-Projects\\trello\\src\\components\\dnd\\example.js":"9","D:\\all-web-projects\\React-Projects\\trello\\src\\components\\dnd\\Container.jsx":"10","D:\\all-web-projects\\React-Projects\\trello\\src\\components\\dnd\\Card.jsx":"11","D:\\all-web-projects\\React-Projects\\trello\\src\\components\\dnd\\ItemTypes.js":"12","D:\\all-web-projects\\React-Projects\\trello\\src\\components\\columns\\column\\Column.js":"13"},{"size":653,"mtime":1607566732116,"results":"14","hashOfConfig":"15"},{"size":798,"mtime":1607901699896,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":371,"mtime":1607566677024,"results":"18","hashOfConfig":"15"},{"size":1047,"mtime":1607884297765,"results":"19","hashOfConfig":"15"},{"size":1785,"mtime":1607962760662,"results":"20","hashOfConfig":"15"},{"size":3616,"mtime":1607935167675,"results":"21","hashOfConfig":"15"},{"size":4946,"mtime":1607963314570,"results":"22","hashOfConfig":"15"},{"size":52,"mtime":1607764338383,"results":"23","hashOfConfig":"15"},{"size":1451,"mtime":1607764706735,"results":"24","hashOfConfig":"15"},{"size":2620,"mtime":1607765857446,"results":"25","hashOfConfig":"15"},{"size":50,"mtime":1607764339209,"results":"26","hashOfConfig":"15"},{"size":2427,"mtime":1607963183743,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ad924t",{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"D:\\all-web-projects\\React-Projects\\trello\\src\\index.js",[],["60","61"],"D:\\all-web-projects\\React-Projects\\trello\\src\\App.js",["62","63","64"],"import './App.css';\nimport { connect } from 'react-redux'\nimport Columns from './components/columns/Columns';\nimport Modal from './components/Modal/Modal'\nimport Example from './components/dnd/example'\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <Modal />\n      <Columns />\n      {/* <DndProvider backend={HTML5Backend}>\n        <Example />\n      </DndProvider> */}\n    </div>\n  );\n}\nconst mapStateToProps = (state) => {\n  return {\n    // ctr:state.count\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // increment:()=>dispatch({type:'add'}),\n    // decrement:()=>dispatch({type:'subtract'}),\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","D:\\all-web-projects\\React-Projects\\trello\\src\\reportWebVitals.js",[],"D:\\all-web-projects\\React-Projects\\trello\\src\\store\\reducers\\reducer.js",[],"D:\\all-web-projects\\React-Projects\\trello\\src\\components\\columns\\Columns.js",["65","66"],"import React, { useRef, useState } from 'react'\r\nimport './Columns.css'\r\nimport { connect } from 'react-redux'\r\nimport Column from './column/Column'\r\n\r\nconst Columns = (props) => {\r\n\r\n\r\n    let col = (\r\n        props.columns.map((c, i) => {\r\n            return (\r\n                <Column\r\n                    key={i}\r\n                    headTitle={c.headTitle}\r\n                    id={c.id}\r\n                    columnIndex={i}\r\n                    cards={c.cards}\r\n                />\r\n            )\r\n        })\r\n    )\r\n    return (\r\n        <div className='columns-container'>\r\n            {col}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        columns: state.columns\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setHeadline: (value, index) => dispatch({ type: 'set-title', value, index }),\r\n        addNewCard: (data, columnIndex) => dispatch({ type: 'add-card', data, column: columnIndex })\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Columns)","D:\\all-web-projects\\React-Projects\\trello\\src\\components\\Cards\\Cards.js",[],"D:\\all-web-projects\\React-Projects\\trello\\src\\store\\reducers\\data.js",["67"],"import update from 'react-addons-update'\r\n\r\nconst initialState = {\r\n    columns: [{\r\n        id: 220,\r\n        headTitle: 'headTitle1',\r\n        cards: [{\r\n            id: 33,\r\n            headline: 'card Title1',\r\n            description: 'card column 1'\r\n        },\r\n        {\r\n            id: 55,\r\n            headline: 'card Title2',\r\n            description: 'card column 1'\r\n        }]\r\n    },\r\n    {\r\n        id: 11,\r\n        headTitle: 'headTitle2',\r\n        cards: [{\r\n            id: 66,\r\n            headline: 'card Title',\r\n            description: 'card coulmn 2'\r\n        },\r\n        ]\r\n    },\r\n    {\r\n        id: 22,\r\n        headTitle: 'headTitle3',\r\n        cards: [{\r\n            id: 22,\r\n            headline: 'card Title',\r\n            description: 'card column 3'\r\n        },\r\n        ]\r\n    }],\r\n    modal: {\r\n        status: false,\r\n        activeCard: null\r\n    }\r\n}\r\nfunction generateId(obj) {\r\n    obj.id = Math.floor(Math.random() * 10000)\r\n    return obj\r\n}\r\nfunction searchObjArray(arr, id) {\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (arr[i].id === id) {\r\n            return i\r\n        }\r\n    }\r\n}\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'add-description':\r\n            const newDescription = update(state, { columns: { 0: { cards: { 0: { description: { $set: 'iam changed' } } } } } })\r\n            return newDescription\r\n\r\n        case 'open-modal':\r\n            const openModal = update(state, { modal: { status: { $set: true } } })\r\n            return openModal\r\n\r\n        case 'close-modal':\r\n            let ind = searchObjArray(state.columns[action.data.column].cards)\r\n            const closeModal = update(state, { columns: { [action.data.column]: { cards: { [ind]: { $set: action.data } } } }, modal: { status: { $set: false } } })\r\n            return closeModal\r\n\r\n        case 'set-title':\r\n            let i = searchObjArray(state.columns, action.id)\r\n            const newVal = update(state, { columns: { [i]: { headTitle: { $set: action.value } } } })\r\n            return newVal\r\n\r\n        case 'set-active-card':\r\n            const activeCard = update(state, { modal: { activeCard: { $set: action.prop } } })\r\n            return activeCard\r\n\r\n        case 'set-active-card-title':\r\n            const activeCardTitle = update(state, { modal: { activeCard: { headline: { $set: action.value } } } })\r\n            return activeCardTitle\r\n\r\n        case 'set-active-card-description':\r\n            const activeCarddescription = update(state, { modal: { activeCard: { description: { $set: action.value } } } })\r\n            return activeCarddescription\r\n\r\n        case 'add-card':\r\n            const addNewCard = update(state, { columns: { [action.column]: { cards: { $push: [action.data] } } } })\r\n            return addNewCard\r\n\r\n        case 'set-card-title':\r\n            let index = searchObjArray(state.columns[action.column].cards, action.id)\r\n            const changeCardTitle = update(state, { columns: { [action.column]: { cards: { [index]: { headline: { $set: action.value } } } } } })\r\n            return changeCardTitle\r\n        case 'set-card-description':\r\n            let inde = searchObjArray(state.columns[action.column].cards, action.id)\r\n            const changeCardDescription = update(state, { columns: { [action.column]: { cards: { [inde]: { description: { $set: action.value } } } } } })\r\n            return changeCardDescription\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default reducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n//modifying modals to recive cards data and modifying them","D:\\all-web-projects\\React-Projects\\trello\\src\\components\\Modal\\Modal.jsx",["68"],"import React, { useState, useRef } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { connect } from 'react-redux'\r\nimport './Modal.css'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        overflow: 'auto',\r\n    },\r\n    paper: {\r\n\r\n        borderRadius: '4px',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(3, 4, 3, 3),\r\n        marginTop: '50px',\r\n        outline: 'none',\r\n        width: '55%',\r\n        backgroundColor: '#c3bcff'\r\n    },\r\n}));\r\n\r\nfunction TransitionsModal(props) {\r\n    const classes = useStyles();\r\n    const ref = useRef([])\r\n    const onChangeHandler = (e, str) => {\r\n        switch (str) {\r\n            case 'title':\r\n                props.setActiveCardTitle(e.target.value)\r\n                props.setCardHeadline(e.target.value, props.activeCard.id, props.activeCard.column)\r\n                break;\r\n            case 'description':\r\n                props.setActiveCarddecription(e.target.value)\r\n                props.setCardDescription(e.target.value, props.activeCard.id, props.activeCard.column)\r\n                break;\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={props.modal}\r\n                onClose={(e) => props.closeModal(props.activeCard)}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 200,\r\n                }}\r\n            >\r\n                <Fade in={props.modal}>\r\n                    <div className={classes.paper}>\r\n                        <div className='modal-title-container'>\r\n                            {/* <textarea\r\n                                onChange={(e) => onChangeHandler(e, 'title')}\r\n                                ref={el => ref.current[0] = el}\r\n                                className=\"title modal-card-title\"\r\n                                value={props.activeCard ? props.activeCard.headline : null}\r\n                                >\r\n                            </textarea> */}\r\n                            <TextareaAutosize\r\n                                spellCheck={false}\r\n                                className=\"title modal-card-title\"\r\n                                rows={4}\r\n                                value={props.activeCard ? props.activeCard.headline : null}\r\n                                onChange={(e) => onChangeHandler(e, 'title')}\r\n                                ref={el => ref.current[0] = el}\r\n                            />\r\n                        </div>\r\n                        <div className='modal-description-container'>\r\n                            <h3>Description</h3>\r\n                            <TextareaAutosize\r\n                                spellCheck={false}\r\n                                rows={4}\r\n                                onChange={(e) => onChangeHandler(e, 'description')}\r\n                                ref={el => ref.current[1] = el}\r\n                                className=\"title modal-card-description\"\r\n                                value={props.activeCard ? props.activeCard.description : null}\r\n                            />\r\n\r\n                            <div className='save-exite-container'>\r\n                                <button>save</button>\r\n                                <button>X</button>\r\n                                <h1 style={{ color: 'red' }}>remember to move autosize library</h1>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        modal: state.modal.status,\r\n        activeCard: state.modal.activeCard,\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        openModal: () => dispatch({ type: 'open-modal' }),\r\n        closeModal: (data) => dispatch({ type: 'close-modal', data }),\r\n        setActiveCardTitle: (value) => dispatch({ type: 'set-active-card-title', value }),\r\n        setActiveCarddecription: (value) => dispatch({ type: 'set-active-card-description', value }),\r\n        setCardDescription: (value, id, column) => dispatch({ type: 'set-card-description', value, id, column }),\r\n        setCardHeadline: (value, id, column) => dispatch({ type: 'set-card-title', value, id, column })\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransitionsModal)","D:\\all-web-projects\\React-Projects\\trello\\src\\components\\dnd\\example.js",[],"D:\\all-web-projects\\React-Projects\\trello\\src\\components\\dnd\\Container.jsx",[],"D:\\all-web-projects\\React-Projects\\trello\\src\\components\\dnd\\Card.jsx",[],"D:\\all-web-projects\\React-Projects\\trello\\src\\components\\dnd\\ItemTypes.js",[],["69","70"],"D:\\all-web-projects\\React-Projects\\trello\\src\\components\\columns\\column\\Column.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":5,"column":8,"nodeType":"77","messageId":"78","endLine":5,"endColumn":15},{"ruleId":"75","severity":1,"message":"79","line":6,"column":10,"nodeType":"77","messageId":"78","endLine":6,"endColumn":21},{"ruleId":"75","severity":1,"message":"80","line":7,"column":10,"nodeType":"77","messageId":"78","endLine":7,"endColumn":22},{"ruleId":"75","severity":1,"message":"81","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":23},{"ruleId":"75","severity":1,"message":"82","line":1,"column":25,"nodeType":"77","messageId":"78","endLine":1,"endColumn":33},{"ruleId":"75","severity":1,"message":"83","line":43,"column":10,"nodeType":"77","messageId":"78","endLine":43,"endColumn":20},{"ruleId":"75","severity":1,"message":"82","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":25},{"ruleId":"71","replacedBy":"84"},{"ruleId":"73","replacedBy":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'Example' is defined but never used.","Identifier","unusedVar","'DndProvider' is defined but never used.","'HTML5Backend' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'generateId' is defined but never used.",["86"],["87"],"no-global-assign","no-unsafe-negation"]